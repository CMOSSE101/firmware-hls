// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "VMRouterDispatcher_AddStub.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool VMRouterDispatcher_AddStub::ap_true = true;
const sc_logic VMRouterDispatcher_AddStub::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic VMRouterDispatcher_AddStub::ap_const_logic_0 = sc_dt::Log_0;

VMRouterDispatcher_AddStub::VMRouterDispatcher_AddStub(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_return_0);
    sensitive << ( HLSReducedStubLayer_z_V_write );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( HLSReducedStubLayer_phi_V_write );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( HLSReducedStubLayer_r_V_write );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( HLSReducedStubLayer_pt_V_write );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( HLSReducedStubLayer_index_V_write );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "VMRouterDispatcher_AddStub_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, HLSReducedStubLayer_z_V_write, "(port)HLSReducedStubLayer_z_V_write");
    sc_trace(mVcdFile, HLSReducedStubLayer_phi_V_write, "(port)HLSReducedStubLayer_phi_V_write");
    sc_trace(mVcdFile, HLSReducedStubLayer_r_V_write, "(port)HLSReducedStubLayer_r_V_write");
    sc_trace(mVcdFile, HLSReducedStubLayer_pt_V_write, "(port)HLSReducedStubLayer_pt_V_write");
    sc_trace(mVcdFile, HLSReducedStubLayer_index_V_write, "(port)HLSReducedStubLayer_index_V_write");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
#endif

    }
}

VMRouterDispatcher_AddStub::~VMRouterDispatcher_AddStub() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void VMRouterDispatcher_AddStub::thread_ap_return_0() {
    ap_return_0 = HLSReducedStubLayer_z_V_write.read();
}

void VMRouterDispatcher_AddStub::thread_ap_return_1() {
    ap_return_1 = HLSReducedStubLayer_phi_V_write.read();
}

void VMRouterDispatcher_AddStub::thread_ap_return_2() {
    ap_return_2 = HLSReducedStubLayer_r_V_write.read();
}

void VMRouterDispatcher_AddStub::thread_ap_return_3() {
    ap_return_3 = HLSReducedStubLayer_pt_V_write.read();
}

void VMRouterDispatcher_AddStub::thread_ap_return_4() {
    ap_return_4 = HLSReducedStubLayer_index_V_write.read();
}

}

